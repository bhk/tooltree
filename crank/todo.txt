Future Directions
####

project.mak
====

Todo
----

* Refactor `make clean`

  1. clean: all_clean

  2. $C_clean: rm -rf $(call .,out)

  3. $(call .,prereqOf)_clean: $C_clean

* Rename ingredients of `out`:
    dir  --> outDir
    name --> outName
    ext  --> outExt


High-Level Objectives
---------------------

This project tree, which originally consisted of a number of composable
subprojects retrieved via Pakman, has been dumbed down to fit in a single
git repository.  To recover composability, we have had to claw back, in a
git-compatible way, the following capabilities:

 1. Packages should describe their dependencies: this is needed in order to
    automate creation or maintenance of a workspace. [A supervisory project
    is like a workspace: it must be created for each new composition of
    projects, and it must be updated after package substitution.]

 2. Packages should describe where their build results end up. [In this
    tree, each client knows the internal structure of the packages it uses,
    which would limit interchangeability and prohibit multi-variant builds.]

 3. Packages should describe their build step.  [This tree currently assumes
    each subproject uses make.]

 4. Package builds should accept input parameters. Different kinds of builds
    -- e.g. debug vs. release vs. metrics -- will produce different results,
    and will require different build commands.

 5. Packages should be configurable: a 'configure' step would set defaults
    for dependencies and build options, so one can easily work on the same
    configuration used by a higher-level project.

 6. Package should be able to specify parameters for the packages they
    include (see below).

The `project.mak` makefile implements all of these except for automated
creation of a supervisory project.


Dependency Inversion
--------------------

Here is a design question that comes up not just in SCM and build systems
but in most modular software environments: should a module specify its own
dependencies, or instead have them provided as parameters?

In Pakman, packages specify their own dependencies *absolutely* (via URIs).
They do have the ability to accept parameters that they may allow to
influence (or outright specify) their dependencies, but they are ultimately
in control.

In Lua's module system, modules specify their own dependencies (via paths
that are relative to LUA_PATH). Lua modules accept no parameters, so there
is no way to externally influence the dependencies of a module except via
modifying LUA_PATH.

Competing objectives:

 * When a package specifies its own dependencies, we can easily and reliably
   interchange it with other packages that include different sets of
   dependencies.

   Such a project can be tested against its dependencies, providing a level
   of assurance that it will work the same when incorporated into a larger
   project.

 * When a package's dependencies can be controlled by its parent, we can
   compose it in more interesting ways with other packages without modifying
   the package itself. These new configurations may not have been tested.

   The use case could be as complex as replacing one SQL database with
   another, or as simple as replacing version 251 of a dependency with
   version 237.

The two use cases are not necessarily incompatible as long as we separate
marshaling dependencies from configuration.

 1. Pacakgescan specify absolute locations for their dependencies, and that
    information could be used to construct a new supervisory project (in a
    Git scenario) or client workspace (in a P4 scenario).

 2. Projects can specify the *actual* locations (e.g. a subdirectory
    of a supervisory project) during a configuration phase.


Project Variants
----------------

Project variants are currently defined at the project level. Each variant
has a short name and an arbitrary number of properties.

Package dependencies are *builds* (variants of other packages). When a
package names a variant of another package, it specifies it using the short
name. Packages cannot create descriptions of variants (only the project
level can).

This potentially increases the coupling between a package and the project,
but it does keep things relatively simple.


crank.min
====

Paremetrized Sub-Instances
----

One shortcoming of the object model in Crank is that instances cannot
flexibly "construct" other instance. The property lookup mechanism that is
easily implemented in Make is not dynamic in nature; property definitions
are static and global. What would be useful in some cases is introducing a
definition of an instance at run-time, for a limited scope.

For example, `Exe` makes use of `Compile` using `$(call
get,out,Compile,SRC)`, fabricating instances of `SRC`.  In order to control
compilation flags for SRC, the user must know to assign `Compile.flags` or
`Compile[SRC].flags`, which exposes two aspects of `Exe` that are best kept
encapsulated:

 1. The user must know that `Exe` uses `Compile` in this manner.

 2. The user must know about all of the source files that will be named (if
    the user wants to limit the scope of the flags to objects compiled for
    *this* executable.)

Ideally, `Exe` could expose the complete interface, and users could attach
properties to `Exe`. In order to achieve this, `Exe` would have to be able
to "pass" these properties along to the instance it fabricated. (Currently,
the item name is the only thing it can control via `get`.)

This presents some syntax challenges as well as implementation challenges.

For syntax, the best solution I have is '_iget/_oget' as used in
crank-lua.min.  An intermediate class is defined, which for this Exe example
would be:

.  ExeCompile.parent = Compile
.  ExeCompile.flags = $(call _oget,flags)
.  ExeCompile.includes = $(call _oget,includes)

It is then used like this:

.  Exe.rule = ... $(foreach s,SOURCEFILES,$(call _iget,rule,Compile,$s))

This does not provide the ability to pass through *all* properties. The
intermediate class must name all of the properties that are to be passed
through. This is quite a large set in the case of `Compile`.

In a native syntax this would be:

.   Exe = {
.       ...
.       inferred = foreach s in SOURCEFILES yield Compile + SELF + { in = :s }),
.       rule = foreach(o, inferred, o.rule)
.   }

One possible hack:

.  $(call <invent>,CLASS,ITEM,PROP,VALUE,PROP,VALUE,...)
.  $(call <iget>,prop,CLASS,ITEM,PROP,VALUE,PROP,VALUE,...)

This would create new global variables. Each VALUE could be evaluated
immediately or contain expressions to be expanded later (e.g. `$$(call
.,prop)`) -- which allows selection between "inner" and "outer" properties.
It could also create "outerClass" and "outerItem" properties, to allow them
to be referenced by property definitions in the intermediate class (via
perhaps `<oget>`).

One thing to think about is when a single instance is fabricated twice. For
example, when two executables name the same source file.  The *language*
will not distinguish these two instances, although it could. A bigger
problem is that the two instances will potentially conflict with each other
(emitting two rules for the same output file, perhaps different due to
different Exe flags).


Another direction:

  .  $(call <gen>,Class,Item)
  .   --> $(call get,out,Class,Item)$(call <queueRule!>,Class[Item])


Going Native
----

Crank's existing syntax is a compromise to allow a reasonably simple
implementation in GUN Make, which is widely available. A syntax tailored to
Crank could offer two significant improvements:

 1. Provide a less verbose and more approachable way to express Crank
    constructs.

 2. Use data types other than string for construction of command lines.


Syntax
----


 * Class definition

   Classes can be specified by providing property definitions:

   . A : {
   .    a = ... ,
   .    b = ... ,
   . };

   Classes can be composed with other classes to create sub-classes:

   . C : A + B;

   . C : A + {
   .    x = ...
   . };

   Note that semantically, classes can be defined in terms of simple
   composition, in which later property bindings override earlier
   ones. Cloning + refinement is indistinguishable from inheritance when
   there is no run-time modification of classes.

   Classes are equivalent to immutable hash maps.

 * Property definitions

   Property evaluation is performed within the scope of some class or object.

   `a` refers to the "a" property of the current context.

   `:a` refers to the "a" property of the enclosing context.

 * Evaluation of a property of a specific object.

   `obj.prop`

 * Data Types

   - Classes ("Objects"?) (immutable hash maps)
   - Token lists (strings + BASH tokens)

Token Lists
----

Strings are sometimes troublesome to work with when constructing command
lines. Quoting arguments for the shell is cumbersome, and iterating over
words (as in Make) does not do the right thing when arguments contain
spaces. A further annoyance is that redundant whitespace can creep into
command lines.

If, instead, the language supports shell syntax directly, command line lines
can be constructed in an easier, less error prone way.  Whitespace is
significant only for delimiting arguments (unless explicitly quoted). Shell
specials like `|` and `>` will be treated as specials unless quoted or
escaped, and that distinction will not be lost.

A data type we will call a *token list* allows command line to be easily
constructed and manipulated. It is a list of values that are either strings
(commands or arguments) or shell specials. For example:

   . command = $exe -o $out $flags -w -- $in

... would be analogous to the following Lua:

   command = append(exe, {"-o"}, out, flags, {"-w", "--"}, in)

When an expression that appears as a distinct word evaluates to a token list
(as `$flags` is expanded above) it is inserted in place, creating a new
list.  When an expression that appears *within* a word expands to a token
list:

   .  a = a b c,
   .  x = x y,
   .  A $a $x  -->  A a b c x y   (6 strings)
   .  A$a$x    -->  'Aa b cx y'   (1 string)
   .  "$a"     -->  'a b c'       (1 string)


Symbolic vs. Literal Source
----

Most languages treat their source code as primarily symbolic, and require
special syntax for literals (e.g. `"` ... `"`).  Make and shells treat their
source as literal strings primarily, and require an escape character (`$`)
to incorporate variable values or function results.

The literal bias seems well suited to build systems, where command line
manipulation is common.

A problem is that such languages has a single data type (strings in make,
argument lists in shell). We need other types ... at least classes/objects
and token lists.

Treating definitions literally makes most assignments simpler, since most
assignments deal with constructing command lines. This requires an escape
character to refer to properties or functions.


. SmarkDoc : Gen + {
.   ext     = html,
.   command = $exe -o $out $flags -- $in ,
.   depFile = $(out).dep,
.   flags   = $if(css, [[ --no-default-css $foreach(f,css,[[--css=$f]])
.             opts --deps=$depFile ]]),
.   exe     = $dir/smark,
.   exports = SMARK_PATH,
.   dir     = $thisdir,
.   css     = $^,
.   opts    = $^,
.   SMARK_PATH = ./?.lua,
. }


Implicit Build?
----

An implicit "build" step examines all generated instances, but this seems
ugly.

In Crank, "classes" are actually functions that operate on an item name,
returning a set of named properties ... so it seems appropriate for
instantiation to resemble command invocation in a shell.
