# General-purpose Make functions and variable definitions

\hash := \#
\t := $(if ,,	)
\s := $(if ,, )
\c := ,
\semi := ;
$(if ,,\) := $(if ,,\)

define \n


endef

<eq> = $(if $(findstring $1,$(findstring $2,$1)),1,$(if $(or $1,$2),,1))
<not> = $(if $1,,1)
<car> = $(word 1,$1)
<cdr> = $(wordlist 2,999999,$1)
<append> = $1$(if $1,$(if $2, ))$2

<reverse> = $(if $1,$(call <reverse>,$(<cdr>),$(word 1,$1)$(if $2, )$2),$2)

# Return the directory name of the last included makefile. Before a makefile
# includes any other makefiles, this will give the directory containing that
# makefile.  (Be sure to immediately expand the value using `:=`.)
<dirname> = $(patsubst %/,%,$(dir $(lastword $(MAKEFILE_LIST))))

# $(call <for>,VAR,LIST,EXPR,SEP) : Like foreach, but the result items are
#    separated by one instance of SEP [not by one space.  Also, EXPR is
#    double-expanded; use `$$` instead of `$`.
<for> = $(if $(word 1,$2),$(foreach $1,$(word 1,$2),$(call if,,,$3))$(if $(word 2,$2),$4$(call <for>,$1,$(call <cdr>,$2),$3,$4)))

# $(call <ifdef>,VAR,DEFAULT) : return $(VAR) if VAR is defined.
<ifdef> = $(if $(filter undef%,$(origin $1)),$2,$($1))

# debug mode (avoid referencing undefined var)
<debug> = $(call <ifdef>,crank_DEBUG)

# return $1 if variable $1 is defined
<defined> = $(if $(filter undefined,$(origin $1)),,$1)

<errorContext> ?=
<error> = $(error $(<errorContext>)$(if $C,Evaluating $P for $C[$I]:)$1)

# return value of valuable if defined; display error message otherwise
<assertVar> = $(if $(call <defined>,$1),$($1),$(call <error>,variable "$1" not defined: $(<$1_desc>)))

# crank provides very limited Windows support
<isCMD> := $(if $(strip $(shell echo)),yes)

<uname-s> := $(if $(<isCMD>),WinNT,$(shell uname -s))

# <uname> = Linux, Darwin, or WinNT
<uname> := $(firstword $(filter-out CYGWIN_NT% MINGW32_NT% Windows_NT,$(<uname-s>)) WinNT)

<isWin> = $(filter WinNT,$(<uname>))

# Cygwin provides compatibility at the cost of incompatibility.
<isCygwin> := $(filter CYG%,$(<uname-s>))

# <abspath> works around Cygwin Make's bogus `abspath` results, and tries
#     to avoid drive letters in path names.
<abspath> = $(abspath $1)
ifneq "$(<isCygwin>)" ""
  <abspath> = $(patsubst $(shell cygpath -am \\)%,/%,$(foreach x,$1,$(shell cygpath -am $x)))
endif

<dotExe> = $(if $(<isWin>),.exe)

# $(call <once>,VAR) : return $(VAR), but evaluate it only once
<once> = $(if $(call <defined>,<@$1),,$(eval <@$1 := $($1)))$(<@$1)

# <arg>: quote an argument for a BASH command line

<arg> = '$(subst ','\'',$1)'#'
ifeq "WinNT" "$(<uname>)"
  # Some Cygwin/MinGW builds of Make do very strange things with arguments.
  #    $(shell echo '\\')    --> '\\'
  #    $(shell echo '\\ ')   --> '\ '
  #    $(shell echo '\\"')   --> '\\\'
  #    $(shell echo '\\'"")  --> '\'
  # If we see a backslash we double the backslashes and append two double quotes.
  ifeq "$(shell echo '\\ ')" "\ "
    <_arg> = '$(subst ','\'',$1)'#'
    <arg> = $(if $(or $(findstring ",$1),$(findstring \,$1)),$(call <_arg>,$(subst \,\\,$1))"",$(<_arg>))#"
  endif
endif

# command that writes $1 to stdout
<write> = printf %b $(call <arg>,$(subst $(\n),\n,$(subst \,\\,$1)))

# command that writes string $2 to file $1
<writeFile> = $(call <write>,$2) > $1

<subfilter> = $(patsubst $1,$2,$(filter $1,$3))

# $(call <assoc>,KEY,LIST) : find value(s) for KEY in list "key=value ..."
<assoc> = $(call <subfilter>,$1=%,%,$2)

# return keys in list "key=value ..."
<keys> = $(foreach i,$1,$(firstword $(subst =, ,$i)))

# <pquote/punquote> : escape/unescape "%"
<pquote> = $(subst %,^p,$(subst ^,^c,$1))
<punquote> = $(subst ^c,^,$(subst ^p,%,$1))

# return unique words in $1 without re-ordering
<uniqX> = $(if $1,$(firstword $1) $(call $0,$(filter-out $(firstword $1),$1)))
<uniq>  = $(strip $(call <punquote>,$(call <uniqX>,$(call <pquote>,$1))))

# prefix $1 to every line of $2
<END> = *# should not appear in any string passed to <prefix>
<prefix> = $(subst $(<END>),,$(subst $1$(<END>),,$1$(subst $(\n),$(\n)$1,$2$(<END>))))

# quote string for debug display: enclose in quotes or prefix lines with $2
<quote> = $(if $(findstring $(\n),$1),$(\n)$(call <prefix>,$2,$1),"$1")

# $(call <show>,value,label) -> label and quoted value (or just value if @@=@@)
<show> = $(info $(if $(findstring @@,$(@@)),$1,$2$(call <quote>,$1, | )))

# eval $1 (with debug output when <debug> is set)
<eval> = $(if $(<debug>),$(info eval: $(call <quote>,$1, | )))$(eval $1)

# remove redundant ".." and "." from $1 and convert "\" to "/"
<_cpxy> = $(if $1,$(if $(and $(filter ..,$(<car>)),$(filter-out ..,$(word 2,$1))),$(call $0,$(word 1,$2) $(wordlist 3,999,$1),$(call <cdr>,$2)),$(call $0,$(<cdr>),$(<car>) $2)),$2)
<_cpx> = $(if $1,$(call $0,$(<cdr>),$(<car>) $2),$(call <_cpxy>,$2))
<_cp> = $(if $(filter /%,$1),/$(call $0,$(patsubst /%,%,$1)),$(subst $(\s),/,$(or $(strip $(call <_cpx>,$(subst $(\s). ,,$(subst /,  , $1 )))),.))$(if $(filter %/,$1),/))
<cleanPath> = $(foreach d,$1,$(call <punquote>,$(call <_cp>,$(call <pquote>,$(subst \\,/,$d)))))

# $(call <relpath>,FROM,TO) : construct relative path from directory FROM to directory/file TO
<xrelpath> = $(if $(filter $(<car>),$(word 1,$2)),$(call <xrelpath>,$(<cdr>),$(call <cdr>,$2)),$(or $(foreach d,$1,..)$(if $1,$(if $2, ))$2,.))
<relpathEnc> = $(subst /, ,$(call <pquote>,$(abspath $1)))
<relpath> = $(call <punquote>,$(subst $(\s),/,$(call <xrelpath>,$(<relpathEnc>),$(call <relpathEnc>,$2))))

# escape value for eval (valid only for RHS of assignment)

# On Cygwin, Make sometimes complains about ';' on RHS of target-specific
# variable assignments passed to $(eval), and sometimes it just truncates
# the value without complaining, and sometimes it works just fine. Escaping
# the semicolon seems to avoid the problem.

<escape> = $(if $1,$(if $(filter X,$(word 1,X$1)),$$(or )))$(subst $(\n),$$(\n),$(subst $(\hash),$$(\hash),$(subst ;,$$(\semi),$(subst $$,$$$$,$1))))

# mescape is a bit faster, but less readable
<mescape> = $$(or )$(subst $(\n),$$(\n),$(subst $(\hash),$$(\hash),$(subst $$,$$$$,$1)))

<toLower> = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))
<toUpper> = $(subst a,A,$(subst b,B,$(subst c,C,$(subst d,D,$(subst e,E,$(subst f,F,$(subst g,G,$(subst h,H,$(subst i,I,$(subst j,J,$(subst k,K,$(subst l,L,$(subst m,M,$(subst n,N,$(subst o,O,$(subst p,P,$(subst q,Q,$(subst r,R,$(subst s,S,$(subst t,T,$(subst u,U,$(subst v,V,$(subst w,W,$(subst x,X,$(subst y,Y,$(subst z,Z,$1))))))))))))))))))))))))))

# Unambiguously encode spaces and all characters that are syntactically
# significant in a parenthesized expression
<encode> = $(subst $$,@D,$(subst %,@P,$(subst $(\hash),@H,$(subst $(word 2,( )),@R,$(subst $(word 1,( )),@L,$(subst $(if ,,,),@C,$(subst $(\t),@t,$(subst $(\n),@n,$(subst $(\s),@-,$(subst @,@1,$1))))))))))

# $1 = file name, $2 = list of directories, $3 = error function
<searchPath> = $(or $(call <cleanPath>,$(firstword $(wildcard $(addsuffix /$1,$(patsubst %/,%,$2))))),$($3))

# $(call <require>,MODULE,[ERRORFN])
<require> = $(if $(filter $1,$(notdir $(MAKEFILE_LIST))),,$(eval include $(call <searchPath>,$1,$(<requirePath>),<requireError>)))

# Search original Makefile's directory and crank directory
<requirePath> = $(call <uniq>,$(dir $(MAKEFILE_LIST)))

<requireError> = $(call <error>,$0: cannot find $1 in path "$2")

require = $(info warning: use '<require>' instead of 'require')$(call <require>,$1)

# $(call <memoize>,FUNCTION,KEYS)
#
# KEYS is a list of make expressions to incorporate into the variable used
# to store the memoized result.  For a two-argument function that depends
# upon the external variable 'v', we would use: "$$1 $$2 $$v".  A single
# key can incorporate multiple variables as long as it is done in a way to
# avoid ambiguity (e.g. "AB" + "C" == "A" + "BC")

# this sub-expression constructs the variable name for memo results
<memovarX> = $(if $1,$$(subst ^,^1,$(<car>))^|$(call <memovarX>,$(<cdr>)))
<memovar> = <@$$(subst $$(\s),^s,$$(subst $$(\t),^t,$(call <memovarX>,$2)))

# this sub-expression evaluates the original function body and assigns the variable
<memoset> = $$(eval $$$$(_MVAR) := $$(call <mescape>,$(value $1)))

<memoize> = \
  $(eval $1 = $$(foreach _MVAR,$(<memovar>),$$(if $$(filter und%,$$(origin $$(_MVAR))),$(<memoset>))$$($$(_MVAR))))


<wqI>  = ? _ = ! \# $$ % & ( ) * , / : ; < > [ \ ] ^ { | } ~ " ' `
# emacs wants to see a terminating "
<wqO> = +Q +U +E +A +B +C +D +F +G +H +I +J +K +L +M +N +O +P +R +S +T +V +W +X +Y +Z +0 +1

<polysubst> = $(if $1,$(call $0,$(call <cdr>,$1),$(call <cdr>,$2),$(subst $(word 1,$1),$(word 1,$2),$3)),$3)

# encode a list of words as a legal filename
#   printable ASCII characters that are not filesystem safe are encoded
#   encoded words are delimited by "_"
#   empty list --> "_"
<packWords> = $(or $(subst $(\s),_,$(call <polysubst>,$(<wqI>),$(<wqO>),$(subst +,+9,$(strip $1)))),_)

# decode `packWords` output to a list of words
<words> = $(subst +9,+,$(call <polysubst>,$(<wqO>),$(<wqI>),$(subst _, ,$1)))


#----------------------------------------------------------------
# Object system
#
# CLASS.parent = Base       Inherit properties from class PC
# CLASS += item             Add an item to CLASS
# CLASS.name = value        Define a property that applies to all items
# CLASS[item].name = value  Define a property for one item
#
# Class and property names must not contain ".".
#
# $(call get,P,C,I)       Evaluate property P on item(s) I in class(es) C.
# $(call get*,P,C)        Evaluate property P on all items in class(es) C
#
# Within a 'get' call, the following can be used:
#
#    $(call .,name)       Value for property 'name'
#    $(call .?,name)      Is property defined?
#    $(call .-,name,dflt) Use property dflt if property not defined.
#    $(call inherit)      Inherited value of the property being evaluated.
#
#----------------------------------------------------------------

# Dynamic variables:
#   C, I = item and class names identifying the object
#   && = inheritance chain for C and I
#   P = property variable name being evaluated
#   +C = scope override (set by `inherit` during `&`)

define <warnProp>
$(info $(\n)$(<errorContext>)Undefined Property: "$1" not defined for class "$C" or item "$I".
   Referenced $(if $(+C),via "$$(call inherit)" )from $(or $P,$$(call get,...)).
   Type "make help=$C[$I]" to see definitions.
)$(if $(call <defined>,help),,$(error ))
endef

<warnDot> = $(error $(\n)$(<errorContext>)"$$(call .,PROP)" used out of context.)

# $(<&&>) = get inheritance chain (";"-terminated, not space-delimited)
#  e.g.  "SubClass[item];SubClass;BaseClass;"
<&&X> = $C;$(foreach C,$($C.parent),$(call $0))
<&&> = $(subst $(\s),,$C[$I];$(call <&&X>))

# $(<chain>) = inheritance chain:  C[I] C C.parent ...
<chain> = $(strip $(subst ;, ,$(call <&&>)))

# $(<call>,<classes>,<items>,<fn>,<arg>) : call fn with arg in object context(s)
<call> = $(foreach C,$1,$(foreach I,$2,$(foreach &&,$(call <&&>),$(call $3,$4))))

& = $(firstword $(foreach p,$(subst ;,.$1 ,$(&&)),$(if $(filter undefined,$(flavor $p)),,$p)))

&! = $(or $&,$(call <call>,$C,$I,&,*),$(<warnProp>))

. = $(if $C,$(foreach P,$(&!),$(call $P,$2,$3,$4)),$(<warnDot>))

.? = $(if $&,1)

.- = $(if $&,$(call .,$1),$2)

get = $(call <call>,$2,$3,.,$1)

get* = $(foreach C,$2,$(call <call>,$C,$($C),.,$1))

# Find next property definition in inheritance chain after $P
#   $P = C[I].NAME     ==> resume lookup at C.NAME
#   $P = ANCESTOR.NAME ==> resume lookup at $(ANCESTOR.parent).NAME

<super> = $(foreach +C,$(patsubst %.$1,%,$P),$(foreach &&,$(word 2,$(subst ;$(+C);,; ,;$(&&))),$(&!)))

inherit = $(foreach P,$(call <super>,$(lastword $(subst ., ,$P))),$($P))

+ = $(info Warning: $$(call +) deprecated; use $$(call inherit))$(call inherit)

# return non-empty string if class $1 descends from (or is) $2
<inheritsFromX> = $(if $(filter $1,$2),$1,$(foreach p,$($1.parent),$(call $0,$p,$2)))
<inheritsFrom> = $(firstword $(call <inheritsFromX>,$1,$2))

# $(call <subClasses>,base) -> derived classes (including base)
<subClasses> = $(strip $(foreach C,$(call <subfilter>,%.parent,%,$(.VARIABLES)),$(if $(call <inheritsFrom>,$C,$1),$C)))

# $(call <+=>,VAR) :
<+$(or =)> = $(if $(defined $1),$(call <eval>,$1 = $$(call inherit)))

#----------------------------------------------------------------
# Variant handling
#
# Variant can have properties with inheritance similar to that of build
# items, but different in a couple of ways.  Variants are treated as a
# sequence of "_"-delimited words, and for each such word the variant
# inherits properties from a class named "V-<word>".  Finally, the
# variant inherits from "V".
#
# For example, the following is a potential search order for looking
# up the variant property "prop" when `v` is "foo_bar":
#
#   V[foo_bar].prop
#   V-foo.prop
#   V-fooParent.prop      [if V-foo.parent == "V-fooParent"]
#   V-bar.prop
#   V-barParent.prop      [if V-foo.parent == "V-fooParent"]
#   V.prop

#### Variant property shorthands

<qwords> = $(call <words>,$q)
<vwords> = $(call <words>,$v)


# Properties of variants (e.g. V.flags, V[name].flags) should use `$I` to
# indentify the variant for which the property is being evaulated, not `$v`,
# which is the current variant being built. (The definition of a particular
# variant should not depend on which variant is now being built.)
<vwarn> = $(if $(filter V,$C),$(info Warning: $$v referenced from within a variant property: $C[$I].$P))

# obsolete
_v = $(call <error>,`_v` is no longer supported; use $$(call v.,buildDir))
<outdir> ?= $(call <error>,<outdir> is no longer supported; use $$(call v.,buildDir))

# silently ignore undefined variant properties
V.* ?=

<v&&> = $(subst $(\s),,V[$I];$(foreach C,$(addprefix V-,$(subst _, ,$I)),$(call <&&X>))V;)

# $(<vcall>,<items>,<fn>,<arg>) : call fn with arg in object context(s)
<vcall> = $(foreach C,V,$(foreach I,$1,$(foreach &&,$(call <v&&>),$(call $2,$3))))

# $(call <vget>,PROP,VARIANT)
<vget> = $(call <vcall>,$2,.,$1)

# $(call v.,PROP)  -->  value of PROP property for the current variant
v. = $(<vwarn>)$(call <vget>,$1,$v)

# $(call q.,PROP)  -->  value of PROP property for the queried variant
q. = $(if $q,,$(call <error>,$$q not defined!))$(call <vget>,$1,$q)


#### Default variant properties

V.default   ?= release
V.flags     ?= $(strip $(subst _, ,$I))
V.host      ?= $(V.default)
V.buildDir  ?= .crank/$I
