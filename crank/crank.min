#----------------------------------------------------------------
# crank.min: Declarative build system.  See crank.txt for docs.
#----------------------------------------------------------------

$(if $(filter-out undef%,$(flavor @)),$(error crank.min: '@' is reserved; use "make @@=" to echo commands))

# Use "make @@=@@" for quieter output; "@@=" for unfiltered output
@@ ?= @

<@> = $(findstring @,$(@@))

include $(dir $(lastword $(MAKEFILE_LIST)))defs.min

# V = one or more variant names to be built.  It is typically specified on
#     the command line and defaulted in the project makefile.
V ?= $(V.default)

# v = current variant being built
v = $(firstword $V)

# Multi-V builds
#
# When V contains multiple variants, re-invoke the makefile once per variant.
# We do this by writing a rule for every goal, such as:
#
#   `make foo V='a b'`  ==>  `foo: ; make foo V=a ; make foo V=b`
#
# `make '$(...)'` is a tricky case because it may contain spaces, making
# MAKECMDGOALS unintelligible. In this case we use a pattern rule to "catch"
# it, and when re-invoking make we quote MAKECMDGOALS. (We avoid quoting in
# other circumstances because of problems on certain platforms.)

<mv-goal> = \
  $(or $(if $(filter $$(%),$(word 1,$1)$(lastword $1)),$$%),\
       $(if $(and $(word 2,$1),$(findstring $$,$1)),\
          $(error $$(...) cannot coexist with other goals in a multi-V make)),\
       $1)

<mv-targets> = $(or $(call <mv-goal>,$(MAKECMDGOALS)),$(.DEFAULT_GOAL),all)

<mv-arg> = $(if $(findstring $$,$(MAKECMDGOALS)),$(call <arg>,$(MAKECMDGOALS)),$(<mv-targets>))

define <mv-rules>
.PHONY: $(<mv-targets>)
$(foreach g,$(<mv-targets>),$g: $(patsubst %,V_%,$V)$(\n)$(\t)@true)

$(foreach v,$V,$(\n)V_$v: ; $(<@>)$(MAKE) V='$v' -f $(firstword $(MAKEFILE_LIST)) $(<mv-arg>))

endef

<multiV> = \
  $(call <eval>,$(subst $$,$$$$,$(<mv-rules>)))

<singleV> = \
   $(call <memoize>,.,$$v&$$C[$$I]$$1 $$2) \
   $(eval <allItems> := $$(<allItems>))\
   $(foreach f,$(sort $(filter <onBuild.%,$(.VARIABLES))),\
      $(if $(<debug>),$(info Calling $f))\
      $($f))

# build = where everything happens

build = \
  $(if $(word 2,$V),$(<multiV>),$(<singleV>))


#----------------------------------------------------------------
# Shorthands

@ = $(firstword $(call .,out))
^ = $(call .,^)
< = $(firstword $^)

#----------------------------------------------------------------
# rules

# help=... on command line ==> make 'help' the default target
ifeq "$(origin help)" "command line"
  help:
endif

# open=... on command line ==> make 'open' the default target
<matchOpen> = $(or $(firstword $(filter %/$1,$2) $(foreach o,$2,$(if $(findstring $1,$o),$o))),$(error open: No output file matching '$1'))
<openRule> = open: $(word 2,$(subst =, ,$1))$(subst $(\n),$(\n)$(\t)$(<@>),$(\n)$(call if,,,$(subst ;, ,$(<keys>))))$(\n)
<openItem> = $$(foreach;v,$v,$$(call;get,open,$C,$I))=$@
ifeq "$(origin open)" "command line"
  open:
  <onBuild.40.open> = $(call <eval>,$(call <openRule>,$(call <matchOpen>,$(if $(filter command,$(origin open)),$(open)),$(call <forAllItems>,<openItem>))))
endif


# Sanity-check directory before passing to 'rm -rf': it should be a relative
# path other than "." or ".."
<rm-rf> = $(if $(filter-out /% \% . ..,$(<cleanPath>)),rm -rf $1,echo "clean: not cleaning '$1'")

define <epilogue>

  .PHONY: all clean help help_debug open

  all: # make 'all' the default target if none have been specified
  clean: ; $(<@>)$(call <rm-rf>,$(call v.,buildDir)) && rm -f $(<toClean>)
  help: ; @true
  help_debug: ; @true
  help_v: ; @true

  # Disable default pattern rule behavior.  Crank has no need for it
  # and it can lead to confusion.
  .SUFFIXES:

  # evaluate make expression if given as a goal
  $$%: ; @true $(call <show>,$(call if,,,$$$*),[v=$v] )

endef

crank_DEBUG := $(filter help_debug,$(call <ifdef>,MAKECMDGOALS))

<onBuild.10.epilogue> = $(call <eval>,$(value <epilogue>))

#----------------------------------------------------------------
# "make help"

<goalMapItem> = $(addprefix $C=,$(call .,out))
<goalMap> = $(filter-out =%,$(call <forAllItems>,<goalMapItem>))
<showGoals> = $(foreach g,$(call <uniq>,$(<keys>)),$(\n)"make $g" builds:$(foreach o,$(call <assoc>,$g,$1),$(\n)    $o)$(\n))


define <helpMessage>
$(call <showGoals>,$(<goalMap>))
make all            : build everything
make clean          : delete built files
make C              : build all items in class C
make C[I]           : build item I in class C
make C[I].P         : expand property for item I in class C
make help=          : list generator classes and build items
make help=C         : describe class C
make help=C[I]      : describe item I in class C
make help=C[I].P    : expand property P for item I in class C
make open=name      : open output file matching name
make @@= ...        : echo commands as they execute
make help_debug ... : echo all generated rules
make help_v [V=...] : describe variants
make '$$(...)'       : evaluate a make expression; e.g.: make '$$(shell ls)'

endef

#--------------------------------
# "make help=%"

# show properties definitions inherited by $C
<showInheritedProps> = \
   $(info )\
   $(if $(filter ?,$I),$(info $C items:$(if $($C),$(\n)$(\n)   $($C), (none))$(\n)))\
   $(info $C$(filter-out [?],[$I]) property definitions$(if $(word 2,$V), when v="$v"):)\
   $(foreach var,$(foreach c,$(<chain>),$(sort $(filter $c.%,$(.VARIABLES)))),\
     $(info $(\s) $(var) = $(call <quote>,$(value $(var)),   | )))\
   $(info )

<checkItem> = $(if $(filter $I,? $($1)),,$(info Warning: Item '$1[$I]' is not named explicitly.$(\n)))$1

<checkItem> = $(if $(filter $1[$I],$1[?] $(<allItems>)),,$(info Warning: Item '$1[$I]' is not built by this makefile.$(\n)))$1
<checkClass> = $(if $(filter $1.%,$(.VARIABLES)),$(<checkItem>),$(info Class '$1' has no properties defined.$(\n)))

<classesWithItem> = $(or $(call <subfilter>,%[$I,%,$(<allItems>)),$(<checkItem>))

# $1 = root, $2 = indent, $3 = "parent=child ..."
<tree> = $(\n)$2$1$(foreach c,$(call <assoc>,$1,$3),$(call $0,$c,  $2,$3))

<classTree> = $(call <tree>,Gen,  ,$(foreach g,$(<generators>),$(addsuffix =$g,$($g.parent))))

# $(call <matchClass>,class,<generators>)
#   If class is NOT given, return classes that contain item.  If invalid item
#   or class is given, warn and display the valid items and classes.
<matchClass> = \
  $(or $(if $1,$(<checkClass>),$(<classesWithItem>)),\
    $(info Items: $(addprefix $(\n)  ,$(<allItems>))$(\n))\
    $(info Generator Classes: $(<classTree>)$(\n)))

<showProp> = $(call <show>,$(call get,$1,$C,$I),$(if $(word 2,$V),v="$v" => )$C[$I].$p = )

# $1 = "C=class I=item P=prop"
#  a) C: show property definitions for a class
#  b) C[I]: show property definitions for a class+item
#  c) C[I].P: show expanded property
<helpOnP> = \
  $(info [v=$v])\
  $(foreach I,$(or $(call <assoc>,I,$1),?),\
    $(foreach C,$(call <matchClass>,$(call <assoc>,C,$1)),\
      $(or $(foreach p,$(call <assoc>,P,$1),\
             $(call <showProp>,$p)),\
           $(<showInheritedProps>))))

# Parse help expression => "C=Class [I=Item] [P=prop]"
<parseItem> = $(if $(findstring [,$1),$(patsubst %],%,$(subst ]., P=,$(subst [, I=,C=$1))),C=$1)

<vprops> = $(sort $(call <subfilter>,V.%,%,$(.VARIABLES)) $(call <subfilter>,V[$v].%,%,$(.VARIABLES)))

<helpOn> = $(call <helpOnP>,$(call <parseItem>,$1))

define <help_vMessage>
Variant "$v" properties:$(foreach p,$(<vprops>),
   $p = $(call v.,$p))

endef


# Display help *before* rule generation, in case the user is debugging an
# error that occurs during generation.

<onBuild.20.help> = \
  $(foreach t,$(filter help help_v,$(MAKECMDGOALS)),$(info $(<$tMessage>))) \
  $(if $(call <defined>,help),\
    $(call <helpOn>,$(help)))


#--------------------------------
# Generate just-in-time targets
#
#   Class[item].prop --> evaluate and display property
#   Class[item]      --> build item
#   Class            --> build all items in that class
#

<jitRule> = \
  $(or \
    $(and \
      $(filter 3,$(words $1)), \
      $(call <assoc>,P,$1), \
      $(call <helpOn>,$g),\
      ; @true),\
    $(and \
      $(filter 2,$(words $1)), \
      $(call <assoc>,I,$1),\
      $(call get,out,$(call <assoc>,C,$1),$(call <assoc>,I,$1))),\
    $(and \
      $(filter 1,$(words $1)),\
      $(filter $2[%,$(<allItems>)),\
      $(call <get*>,out,$2)))

<evalJitRule> = $(if $2,$(call <eval>,.PHONY: $1$(\n)$1: $2))

# skip jit goals if a '$(...)' goal is found (it might contain nested [] in
# multiple words and we cannot reliably reconstruct it from MAKECMDGOALS)
<onBuild.50.goals> = \
  $(if $(filter $$%,$(MAKECMDGOALS)),,\
  $(foreach g,$(MAKECMDGOALS),\
     $(call <evalJitRule>,$g,$(call <jitRule>,$(call <parseItem>,$g),$g))))


#----------------------------------------------------------------
# Rule generation
#----------------------------------------------------------------


# $(call <itemCall>,ITEMS,FN,ARG) : call FN with ARG in context of each build item
#   item syntax = "CLASSNAME[ITEMNAME]"
<itemCall> = $(foreach I,$(1:%]=%),$(call <call>,$(word 1,$(subst [, ,$I)),$(subst $(\s),[,$(wordlist 2,999,$(subst [, ,$I))),$2,$3))

# $(call <itemGet>,PROP,ITEMS)
<itemGet> = $(call <itemCall>,$2,.,$1)

# $(call <inferItems>,ITEMS,SEENITEMS) -->  list of items AND inferred items (closed over `inferredItems`)
<inferItems> = $(if $1,$(call <inferItems>,$(call <uniq>,$(filter-out $2 $1,$(call <itemCall>,$1,.,inferredItems))),$2 $1),$2)

<generators> = $(sort $(call <subClasses>,Gen) Gen)

<allItems> = $(strip $(call <inferItems>,$(foreach C,$(<generators>),$(foreach I,$($C),$C[$I]))))

# $(call <forAllItems>,<fn>,<arg>) : call <fn> with <arg> in context of each build item
<forAllItems> = $(call <itemCall>,$(<allItems>),$1,$2)

# `<get*>` is like `get*` but it iterates over <allItems>. This means that
# it includes inferred items, and also that it *excludes* classes that are
# not generators. Also, it cannot be used to declare build items because
# that would lead to infinite recursion when we enumerate all items.
#
<get*> = $(call <itemCall>,$(foreach C,$2,$(filter $(addsuffix [%,$C),$(<allItems>))),.,$1)


<onBuild.30.callGenerators> = $(call <forAllItems>,.,generate!)

#----------------------------------------------------------------
# Gen: base class for other generators
#
# .command = command to be executed (provided by subclass)
# .depFile = [optional] the name of a dependency file to be included
#

# .out = output file
Gen.out = $(call .,dir)$(call .,name)$(call .,ext)
Gen.dir = $(dir $(call v.,buildDir)/$C$(subst /$(call v.,buildDir)/,_,$(subst /..,/__,/$I)))
Gen.name = $(basename $(notdir $I))
Gen.ext = $(suffix $I)

# inferredItems = list of *other* items that need to be built for dependencies of this item.
# syntax = "CLASSNAME[ITENMAME]"
Gen.inferredItems =

# .^ = input files to be named on the command line
Gen.^ = $(call .,in)

# .in = input files
Gen.in = $I

# .prereqOf = by default, all rules will be pre-requisites of 'all'
Gen.prereqOf = all

# .message = message to display before the build command is executed [$1 = .out]
Gen.message = ==> $C[$I] -> $1

# .echo = echo command to be run at build time
Gen.echo = echo $(call <arg>,$(call .,message,$(call .,out)))$(call .,echoExports)
Gen.echoExports = $(foreach e,$(call .,exports),$(\n)echo $(call <arg>,$e=$(call <arg>,$(call .,$e))))

# .mkdir = command to create output directories at build time
Gen.mkdir = mkdir -p $(call <uniq>,$(dir $(call .,out) $(call .,vdepFile)))

# .quiet = "@" => suppress impertinent commands, "" => show all commands
Gen.quiet = $(findstring @,$(@@))

# .Quiet = "@" => suppress build command, "" => show build command
Gen.Quiet = $(if $(findstring @@,$(@@)),@)

# .deps = prerequisite(s) to be listed after `in`
Gen.deps =

# .ooDeps = "order-only dependencies". When files in .ooDeps do not exist,
#     it will cause the target to be built. If they exist but their contents
#     are newer than .out, they will *not* trigger a rebuild.
Gen.ooDeps =

# .exe = command name *or* path to an executable file
Gen.exe =

# .exeDep: if .exe contains '/' we treat it as a prerequisite file
Gen.exeDep = $(if $(findstring /,$(call .,exe)),$(call .,exe))

# .exports = list of properties to be exported as environment variables
#           when the command is executed.
Gen.exports =

# .open = command to 'open' (view) output file
Gen.open = $(call .,openCmd-$(<uname>))
Gen.openCmd-WinNT = explorer $(subst /,$(if $(<isCMD>),\,\\),$@) || true
Gen.openCmd-Darwin = open $(call <arg>,$@)
Gen.openCmd-Linux = $@

# .isPhony = if true, .out is a phony target, not a file.  This disables
# depFile and valueDep functionality (since phony targets are always stale).
Gen.isPhony =

Gen.depFile =

Gen_clean = $(if $(filter $(call v.,buildDir)/%,$1),<toClean> += $1)

<spcEnc> = $(subst $(\s),!0,$(subst $(\t),!+,$(subst !,!1,$1)))
<spcDec> = $(subst !1,!,$(subst !+,$(\t),$(subst !0,$(\s),$1)))

# normalize command lines: delete empty lines, terminate every non-empty
#       line, prefix each line $1 = prefix, $2 = lines
Gen_lines = $(call <spcDec>,$(subst $(\s),,$(foreach line,$(subst $(\n), ,$(call <spcEnc>,$2)),$1$(line)$(\n))))

Gen_prefixIf = $(if $2,$1$2)

# Everything following "<target>: "
Gen.prereqs = $^ $(call .,deps) $(call .,exeDep) $(call Gen_prefixIf, | ,$(call .,ooDeps))

# Windows paths: GNU Make syntax does not accept `:` characters in prerequisite
# or target filenames. Some builds of Make will recognize Windows-style drive
# letters in those cases, but the Make binaries in recent Cygwin distros do
# not have this feature. In order to avoid `multiple target patterns` errors
# we completely remove files with `:` from the list of prerequisites. External
# toolchains are the only offenders we anticipate, and in those cases it
# should be relatively harmless to ignore the dependency.

Gen_pstrip = $1

ifeq "$(<uname>)" "WinNT"
  Gen_pwarn = $(info *** Warning: Windows path in $C[$I].prereqs (see crank.min))
  Gen_pfilter = $(call <once>,Gen_pwarn)$(subst :,,$(subst |:,,$(strip $(foreach f,$1,$(if $(findstring :,$f),,$f))):))
  Gen_pstrip = $(if $(findstring :,$1),$(Gen_pfilter),$1)
endif


# $1 = .out
define Gen_rule1
# $C[$I]

$1: $(call Gen_pstrip,$(call .,prereqs))
$(if $(call .,command),$(subst $$,$$$$,$(call Gen_lines,$(\t)$(call .,quiet),$(call .,echo)$(\n)$(call .,mkdir)$(\n)$(call .,vdepEmit))$(call Gen_lines,$(\t)$(call .,Quiet),$(call .,command))))
$(foreach x,$(call .,exports),$(\n)$1: export $x = $(call <escape>,$(call get,$x,$C,$I))$(\n))
$(foreach g,$(call .,prereqOf),$g: $1
)
$(if $(call .,isPhony),.PHONY: $1,$(Gen_clean)
$(addprefix -include ,$(call .,depFile))
$(call .,vdepCheck))
endef


# A list of property names whose values are to be treated as dependencies
Gen.valueDeps = $(if $(call .,isPhony),,command)

Gen.vdepFile = $(if $(call .,valueDeps),$@.vdep)

Gen.vdepEmit = $(if $(call .,valueDeps),$(call <writeFile>,$(call .,vdepFile),_vdepstr=$(call .,vdepString)$(\n)))

define Gen.vdepCheck
$(if $(call .,valueDeps),
_vdepstr :=
-include $(call .,vdepFile)
_vdepnow = $(call .,vdepString)
$(call Gen_clean,$(call .,vdepFile))
ifneq ($$(_vdepnow),$$(_vdepstr))
$(call .,out): help # force rebuild
endif
)
endef

Gen.vdepString = $(call <encode>,$(foreach p,$(sort $(call .,valueDeps)),$p $(subst $(\s),+2,$(subst +,+1,$(call .,$p)))))_

# .rule = the Make rule to be eval'ed
Gen.rule = $(call Gen_rule1,$(call .,out))

# "!" implies side effects
Gen.generate! = $(call <eval>,$(call .,rule))


#----------------------------------------------------------------
# Zip generator: Zips the output of one or more classes.
#
# Item name = basename of output file *and* name of class whose outputs
# should be collected into the zip file.  Override .in to select different
# input files.

Zip.parent = Gen
Zip.in = $(call get*,out,$I)
Zip.ext = .zip
Zip.command = zip $@ --junk-paths $(if $(call .,quiet),--quiet) $^
Zip.valueDeps = # avoid polluting target directory

#----------------------------------------------------------------
# Copy: Each item names a file to be copied.
#       Each class names a target directory.

Copy.parent = Gen
Copy.dir = $(call v.,buildDir)/$C
Copy.out = $(call .,dir)/$(notdir $I)
Copy.command = cp $I $@
Copy.valueDeps = # avoid polluting target directory


#----------------------------------------------------------------
# Phony rules
#
# This class generates rules for phony targets.  These targets to not
# construct output files, and when named as a goal their commands will
# always be executed (even if all prerequisites are fresh).
#
# Using this can be preferable to explicit Make .PHONY rules because the
# commands can easily refer to properties of other classes -- e.g. $(call
# get,out,ClassName).
#
# This generator class works a bit differently than the others: the item
# name is the name of the make target, and properties can be attached to the
# item name, as in the following example:
#
#     Phony += runfoo
#     runfoo.deps = $(call get,out,Exe,foo)
#     runfoo.command = $(call get,out,Exe,foo) ...args...


# Note: item name is treated as a class and inherited from (!)
Phony.parent = $I Gen

# `.out` is not a real file that gets generated by `.command`
Phony.isPhony = 1
Phony.mkdir =

Phony.in = #

Phony.out = $I

# phony targets are not automatically built by `make all`
Phony.prereqOf =

# echo command not very useful for phony targets
Phony.echo = $(if $(@@),,$(call inherit))


#----------------------------------------------------------------
# Test: generic unit test rule
#
# Sub-classes define:
#   .test: shell command that exits with 0 on success
#   .fail: a shell command to be run on failure [optional]
#   .skip: if defined, treat tests as success without running command.
#   .touch: command to touch $@ on success [default = touch $@]
#
# Instead of defining .test, subclasses can define:
#   .exe: executable to run (this will be a dependency)
#   .args: arguments to pass to exe
#
# OUTDIR is exported as an environment variable so tests can use this
# directory for temporary files in order to avoid conflict with parallel
# builds of other variants.

Test.parent = Gen
Test.ext = .ok

Test.command = $(call .,_test)$(call .,_fail)$(call .,touch)
Test._test = $(if $(call .,skip),true,$(call .,test))
Test._fail = $(if $(call .,fail),|| ( $(call .,fail) && false ))

Test.test = $(call .,exe) $(call .,args)
Test.exe = $I
Test.args =

Test.skip = $(call v.,skipTests)
Test.fail = echo ERROR: Test[$I]
Test.touch = $(\n)touch $@


Test.OUTDIR = $(dir $@)
Test.exports = OUTDIR

Test.valueDeps = # usually not very valuable for tests


#----------------------------------------------------------------
# Snip: generate a file from a string.
#
# Example usage:
#   Snip += date.h
#   Snip[date.h].data := #define DATE "$(shell date)"$(\n)

Snip.parent = Gen
Snip.command = $(call <writeFile>,$@,$(call .,data))
Snip.in =


#----------------------------------------------------------------
# Options: a mixin that encapsulates flag processing.
# See crank.txt for a detailed description.
#
# Input:   .flags    (command-line options or symbolic names)
# Output:  .options  (command-line options)
#

# Subclasses will typically prepend to this default, allowing variants to
# supercede.  Item-specific defintitions may prepend or append, depending on
# whether it would make sense to override in $v.
Options.flags = $(call v.,flags)

# cancel out opposites ($1 = first, $2 = rest, $3 = processed)
Options_override = $(call $(if $2,Options_override,3),$(word 1,$2),$(wordlist 2,999,$2),$(filter-out $(patsubst nono%,%,no$1),$3) $1)

# expand aliases
Options_expand = $(foreach w,$1,$(or $(subst ;, ,$(call <assoc>,$w,$2)),$w))

# computed set of flags
Options.activeFlags = $(call Options_override,,$(call Options_expand,$(call .,flags),$(call .,flagAliases)))

# aliases ( name=flag1;flag2;flag3 name2=flag4;flag5 ... )
Options.flagAliases =

# command-line options
Options.options = $(foreach f,$(call .,activeFlags),$(or $(filter -%,$f),$(call .-,flag-$f)))
