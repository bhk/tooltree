#----------------------------------------------------------------
# LLVM toolchain generators for Crank
#
# LLVM is an abstract base class that supports Compile-llvm and Exe-llvm.
#

$(call <require>,crank-c-gcc.min)

# The "sanitizers" in the LLVM 3.3 runtime require an explicit
# link to llvm-symbolizer.  Without this, stack traces will
# be full of raw addresses instead of symbols and line numbers.
symbolizer := $(shell which llvm-symbolizer)
export ASAN_SYMBOLIZER_PATH=$(symbolizer)
export MSAN_SYMBOLIZER_PATH=$(symbolizer)

LLVM.flag-target = $(if $(call v.,c-llvmTarget),-target $(call v.,target),)
LLVM.flag-asan  = -fsanitize=address
LLVM.flag-ubsan = -fsanitize=undefined
LLVM.flag-msan  = -fsanitize=memory
LLVM.flag-tsan  = -fsanitize=thread

#----------------------------------------------------------------
# Compile-llvm: compile C or C++ to object file
#----------------------------------------------------------------

Compile-llvm.parent       = Compile-gcc LLVM
Compile-llvm.exeName      = $(if $(filter c++,$(call .,lang)),clang++,clang)
Compile-llvm.flags        = target $(call inherit)
Compile-llvm.flag-android = -integrated-as

#----------------------------------------------------------------
# Exe-llvm: link executable
#----------------------------------------------------------------

Exe-llvm.parent  = Exe-gcc LLVM
Exe-llvm.exeName = $(if $(call .,link++),clang++,clang)
Exe-llvm.flags = target $(call inherit)

#----------------------------------------------------------------
# Lib-llvm: build static library (archive)
#----------------------------------------------------------------

Lib-llvm.parent  = Lib-gcc

#----------------------------------------------------------------
# SharedLib-llvm: build shared library
#----------------------------------------------------------------

SharedLib-llvm.parent  = SharedLib-gcc
SharedLib-llvm.exeName = $(if $(call .,link++),clang++,clang)
