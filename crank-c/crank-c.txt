Configuring Crank-c
=====

During the build phase in a crank-based build, `$v` describes the variant
being built. During a build, `crank.min` inspects properties of the current
variant to decide how to compile source files, link them, etc..  Note that
in this case `$v` describes a variant of the package that is **using**
`crank-c`.

During the project configuration phase (see [project.mak](project.html)), a
variant of `crank-c` **itself** is requested and selected.  The `crank-c`
Package file inspectes `$q` (the requested variant) and selectes a value for
`v` (the variant of `crank-c` to construct).

To keep things simple, packages that use `crank-c` can use the variant name
*that they will be building* as the variant name they *request of `crank-c`*.

The following variant properties are recognized by `crank-c`:


 * `coverage`: this flag indicates that code coverage reporting will be
   used.

   If present during configuration, necessary tools will be inclued in the
   project.

   If present at build time, the `ExeTest` class will automatically
   generate code coverage, and the `Coverage` and `CoverageMetrics` classes
   will be available.

 * `gcc`, `llvm`, `vc7`: If the name of a supported toolchain appears as a
   flag, then that toolchain is selected. Otherwise, a default based on
   `$(<uname>)` is selected.

   During configuration, this toolchain selection has no effect unless the
   `vc7` toolchain is selected, in which case the `cdep` package is
   included.


A simple Package file for a client would list `crank-c` as a dependency,
without naming a specific variant.

.   deps = crank crank-c

In this case the variant of the client package will pass through to crank-c
as the requested variant. If this client is configured for coverage and
non-coverage variants, then the client's `.config` file will list different
crank-c dependencies for each of its variants, which might look something
like this:

.   crank-c = $(crank-c[$v])
.   crank-c[debug] = ../crank-c/.crank/coverage
.   crank-c[release] = ../crank-c/.crank/release

Note that `debug` and `release` variants are mentioned in the example above,
and that attempting to build any other variant will fail, because it would
not know which variant of `crank-c` to build.  This is as expected, because
each variant generally must be configured before it is built. The
configuration step allows each of your included packages to configure and
build themselves appropriately.

A slight variation would be to add the `ccCoverage` flag to the requested
variant name:

.   deps = crank crank-c?ccCoverage_$v

This will have the effect of ensuring that the coverage and non-coverage
variants of the client package will use the *same* variant of crank-c.  This
produce a `.config` that contains a single definition of the `crank-c`:

.   crank-c = ../crank-c/.crank/coverage

This would allow us to build arbitrary variants using `make V=...` *without*
performing explicit configuration of those variants.  In skipping the
configuration step, however, we would be making the assumption that
reconfiguration is not necessary -- which is okay if you know enough about
crank-c to concluded that reconfiguration is not necessary.
