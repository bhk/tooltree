#------------------------------------------------------------------------
# Package configuration properties
#
# The following properties control crank-c configuration and/or build-time
# behavior.  The project-level Makefile can supply these properties globally
# or per-variant.
#
# c-toolchain: name of toolchain (gcc, llvm, vc7, ...) to support
#
# c-targetOS: name of the OS being targeted.  Defaults to $(<uname>) unless
#    toolchain strongly implies an OS.  When a toolchain (e.g. LLVM)
#    supports multiple OSes, this can be overridden in the project makefile.
#
# c-prefix: prefix for gcc/llvm command names
#
# c-coverage: truthy when gcov-based coverage should be generated by
#    ExeTest. This will include the `ctools?HOST` package as a dependency.
#    Note: if the host variant is in turn a coverage variant whose `.host`
#    is itself, this will lead to a circular package dependency.
#
# c-emulator: emulator for off-target variants, if one is available
#
# c-llvmTarget: argument to "-target" for LLVM compile/link [empty => no
#    -target option].  Also, if defined it replaces <uname> in the
#    SharedLib.<uname>-defaultFlags property.
#
# c-targetPlatform: target platform under Android NDK 'platforms' dir
#    [used to construct --sysroot dir when using the "android" flag]
#    [default = android-18]
#
# c-useCDEP: include CDEP package for dependency generation.
#
# flags: used along with the `defaultFlags` and `flags` item properties to
#    add options to the compile and link commands.  Words beginning with `-`
#    are passed literally on the command line.  Other words are used to look
#    up an item property named `flag-<flag>`, which, if defined will be
#    added to the command line. `noXXX` will remove a preceding `XXX` flag.
#

V.c-toolchain  ?= $(if $(filter WinNT,$(<uname>)),vc7,llvm)
V.c-targetOS   ?= $(or $(call .,c-targetOS-$(call .,c-toolchain)),$(<uname>))
V.c-llvmTarget ?= $(if $(call .,-c-llvmArch),$(call .,-c-llvmArch)-$(call .,-c-llvmOS)-$(call .,-c-llvmABI))
V.c-prefix     ?= $(filter-out -,$(call .,c-llvmTarget)-)
V.c-emulator   ?=
V.c-noExec     ?= $(if $(call .,c-llvmTarget),$(if $(call .,c-emulator),,1))
V.c-coverage   ?=
V.c-useCDEP    ?= $(and $(filter vc7,$(call .,c-toolchain)),$(call <not>,$(filter nocdep,$(call .,flags))))

# Properties prefixed with "-" are used only during configuration to compute
# other properties. They are not written to `.config` files.

V.-c-llvmArch     ?=
V.-c-llvmOS       ?= $(call <assoc>,$(call .,c-targetOS),Linux=linux)
V.-c-llvmABI      ?= gnueabi

# If "gcc" appears in the variant name:

V-gcc.c-toolchain     ?= gcc

# If "llvm" appears in the variant name:

V-llvm.c-toolchain    ?= llvm

# If "vc7" appears in the variant name:

V-vc7.c-toolchain     ?= vc7

# If "arm" appears in the variant name:

V-arm.-c-llvmArch     ?= arm
V-arm.c-emulator      ?= qemu-arm -L /usr/$(call .,c-llvmTarget)

# If "aarch64" appears in the variant name:

V-aarch64.-c-llvmArch     ?= aarch64
V-aarch64.-c-llvmABI      ?= gnu
V-aarch64.c-emulator      ?= qemu-aarch64 -L /usr/$(call .,c-llvmTarget)

# If "android" appears in the variant name:

V-android.parent       ?= V-arm
V-android.c-toolchain  ?= gcc
V-android.-c-llvmABI   ?= androideabi
V-android.c-prefix     ?= $(call .-,-prefix-$(call .,c-toolchain))
V-android.NDKRoot      ?= $(or $(ANDROID_NDK_ROOT),$(error ANDROID_NDK_ROOT and V.NDKRoot not defined; needed for:$(\n)  $C[$I].$P))
V-android.-prefix-gcc  ?= $(call crank-c-validate,$(call .,NDKRoot)/toolchains/arm-linux-androideabi-4.8/prebuilt/*/bin)/arm-linux-androideabi-
V-android.-prefix-llvm ?= $(call crank-c-validate,$(call .,NDKRoot)/toolchains/llvm-3.3/prebuilt/*/bin/)

V-cov.c-coverage      ?= 1


crank-c-validate = $(or $(firstword $(wildcard $1)),$(error Directory does not exist:$(\n)   $1$(\n)Needed for $C[$I].$P))


#------------------------------------------------------------------------
# Package description

# variant name = the list of optional dependencies included

v = $(call <packWords>, \
     $(call q.,c-toolchain) \
     $(if $(call q.,c-coverage),\
        ctools?$(call q.,host))\
     $(if $(call q.,c-useCDEP),\
        cdep?$(call q.,host)))

deps = crank $(filter cdep% ctools%,$(<vwords>))
result = $(call v.,buildDir)
conf = .config test/.config
make = make V='$v'
clean = make clean V='$v'

configure = ls -l .config
