# crank-js

crank-js.dir := $(<dirname>)
crank-js.jsdep = $(call <cleanPath>,$(crank-js.dir)/jsdep)

ifneq "" "$(call v.,skipNodeTests)"
  crank-js.node := true
else
  crank-js.node := $(or $(firstword $(shell which nodejs node)),$(error "node not in path!"))
endif

#----------------------------------------------------------------
# JSEnv: environment for running Node

JSEnv.exports = $(call inherit) NODE_PATH
JSEnv.nodePathDirs = .
JSEnv.NODE_PATH = $(subst $(\s),:,$(call .,nodePathDirs))


#----------------------------------------------------------------
# JSBundle: bundle source & its dependencies into one module

JSBundle.parent = JSEnv Gen
JSBundle.ext = .bundle.js
JSBundle.command = $(call .,exe) $(call .,args) -o $@ --odep=$(call .,depFile) $I
JSBundle.args = --bundle
JSBundle.exe = $(crank-js.jsdep)
JSBundle.depFile = $@.d


#----------------------------------------------------------------
# JSToHTML: bundle source & its dependencies into an HTML file

JSToHTML.parent = JSBundle
JSToHTML.ext = .html
JSToHTML.args = --html


#----------------------------------------------------------------
# JSTest: Execute JavaScript tests
#
# QUALIFYING TESTS: When a test module *qualifies* another module, it is
#     executed before all *other* test modules that use the module.  By
#     default, the `*_q.js` naming convention is used to indicate a test
#     that qualifies the corresponding `*.js` file.  This naming convention
#     is embedded in the `JSTest_qualifiers` function; a different function
#     can be specified for a subclass by defining the `.qualifierFunc`
#     property.

JSTest.parent   = JSEnv Test
JSTest.test     = $(crank-js.node) $I
JSTest.deps     = $(call .,requiredFiles)
JSTest.ooDeps   = $(call .,subtests)
JSTest.subtests = $(call get,out,$C,$(filter-out $I,$(filter $($C),$(call $(call .,qualifierFunc),$(call .,requiredFiles)))))
JSTest.qualifierFunc = JSTest_qualifiers

# Use JSTestScan to generate and return dependencies
JSTest.requiredFiles = $(call get,requiredFiles,JSTestScan,$I)
JSTest.inferredItems = JSTestScan[$I]

# FOO.js --> FOO_q.js  [operates word-wise]
JSTest_qualifiers = $(patsubst %.js,%_q.js,$1)


#----------------------------------------------------------------
# JSTestScan: scan implied of a JavaScript file and make them available via
# the `requiredFiles` property.
#
# The generated rule builds a `.dep` file by scanning dependencies of the
# specified JavaScript file ($I).  When the `.requiredFiles` property is
# evaluated it *includes* the `.dep` file, which assigns the variable
# `.scan`, which is returned by `.rqeuiredFiles`.  Due to a feature in GNU
# Make, when an included file is stale (needs to be built or re-built) all
# other rules are ignored and the included file(s) are built, and then the
# entire makefile is evaluated again.  The value of the `.requiredFiles`
# property, therefore, can be treated as up-to-date.

JSTestScan.parent = JSEnv Gen
JSTestScan.depsFor = $(call get,out,JSTest,$I)
JSTestScan.ext = $(suffix $I).dep
JSTestScan.exe = $(crank-js.jsdep)
JSTestScan.command = $(call .,exe) -o $@ --format='JSTestScan[$I].scan = %s' $I
JSTestScan.requiredFiles = $(call <eval>,-include $@)$(call .-,scan)
JSTestScan.deps = $(call .,requiredFiles)
JSTestScan.valueDeps =
JSTestScan.prereqOf =
