# crank-lua: crank generator classes for testing Lua sources and packaging
# them in an executable. This file should be included from an auto-generated
# file that defines the following variables:
#
#   crank-lua.dir     = this directory
#   crank-lua.lua     = lua package for "target" variant
#   crank-lua.luaHost = lua package for "host" variant
#   crank-lua.crank-c = crank-c package

crank-lua.dir := $(<dirname>)


#----------------------------------------------------------------
# LuaConfig: external dependencies (mixin)
#

LuaConfig.luaDir      = $(call <cleanPath>,$(crank-lua.dir)/$(crank-lua.lua))
LuaConfig.luaExe      = $(call .,luaDir)/bin/lua
LuaConfig.luaLib      = $(call .,luaDir)/lib/liblua.lib
LuaConfig.luaImplib   = $(if $(<isWin>),$(call .,luaDir)/lib/liblua.implib)
LuaConfig.luaHostDir  = $(call <cleanPath>,$(crank-lua.dir)/$(crank-lua.luaHost))
LuaConfig.luaHostExe  = $(call .,luaHostDir)/bin/lua
LuaConfig.cfromlua    = $(crank-lua.dir)/cfromlua.lua
LuaConfig.interpreter = $(crank-lua.dir)/interpreter.lua


#----------------------------------------------------------------
# LuaEnv:  environment for running Lua modules (mixin)
#

LuaEnv.parent      = LuaConfig
LuaEnv.exe         = $(call .,luaExe)
LuaEnv.exports     = LUA_PATH LUA_CPATH $(call inherit)
LuaEnv.dlibExts    = $(if $(<isWin>),.dll,.so)
LuaEnv.LUA_PATH    = $(subst $(\s),;,$(call <uniq>,$(foreach d,$(call .,luaPathDirs),$(d:%/=%)/?.lua)))
LuaEnv.LUA_CPATH   = $(subst $(\s),;,$(call <uniq>,$(foreach d,$(call .,luaPathDirs) $(dir $(call .,luaExts)),$(addprefix $(d:%/=%)/?,$(call .,dlibExts)))))
LuaEnv.preloads    =
LuaEnv.luaPathDirs = .
LuaEnv.preloadOpts = $(addprefix -l ,$(call .,preloads))

# Rules that build extensions must be run before *any* rules that run
# scripts or bundle scripts into apps -- this ensures that the LUA_CPATH
# search will find the appropriate extension dependencies the first time the
# script is run (or bundled).  For example, *every* LuaTest/LuaToC target
# therefore has an "order-only" dependency on every extension binary.  These
# targets *might* also have a "strict" dependency on an extension, depending
# on whether it actually uses the extension. These strict dependencies will
# be expressed in a depFile (generated makefile) that is generated when the
# LuaTest rule is run, or when the LuaExe executable is built.
#
LuaEnv.ooDeps      = $(call .,luaExts)
LuaEnv.luaExts     = $(call get*,out,LuaExt)


#----------------------------------------------------------------
# LuaRun: run a Lua script with LuaEnv's environment settings.
#
#   $ make LuaRun=main    # runs main.lua
#

LuaRun.parent    = LuaEnv Gen
LuaRun.in        = $(wildcard $I.lua $I)
LuaRun.command   = $(call .,exe) $(call .,preloadOpts) $(call .,in) $(call .,args)
LuaRun.isPhony   = 1
LuaRun.mkdir     =
LuaRun.valueDeps =
LuaRun.echo      =
LuaRun.args      =


#----------------------------------------------------------------
# LuaShell: run a shell (or other program) with LuaEnv settings
#
#   $ make LuaShell=bash
#   $ make LuaShell=lua
#

LuaShell.parent    = LuaRun
LuaShell.exports   = $(call inherit) PATH
LuaShell.PATH      = $(patsubst %/,%,$(dir $(call .,luaHostExe))):$(PATH)
LuaShell.command   = $(call .,exe) $(call .,args)
LuaShell.mkdir     =
LuaShell.valueDeps =
LuaShell.in        =
LuaShell.args      =

# Oddly, the exported PATH does not apply to the resolution of the command
# being executed. This only matters for `lua`, so we special case that one.
LuaShell.exe     = $(patsubst lua,$(call .,luaHostExe),$I)


#----------------------------------------------------------------
# LuaTest: execute a `lua` source file as a test.
#

LuaTest.parent   = LuaEnv Test
LuaTest.test     = $(call v.,c-emulator) $(call .,exe) $(call .,preloadOpts) $^ $(call .,args) && $(call .,gendeps)
LuaTest.exe      = $(call .,luaExe)
LuaTest.args     =
LuaTest.depFile  = $@.d
LuaTest.gendeps  = $(call .,luaHostExe) $(call .,cfromlua) -MF $(call .,depFile) -MP -MT $@ -MX $^
LuaTest.inferredItems =


#----------------------------------------------------------------
# LuaExe: generate an executable with Lua interpreter and bundled scripts &
# extensions. This works much like `Exe` except that `.in` may contain
# Lua sources. See crank-lua.txt for an overview.
#
# Making a LuaExe involves the following commands:
#
#   1. Invoke cfromlua to generate the "main" C source. This command is in
#      LuaToC[$I].rule, which LuaExe explicitly appends its own .rule.
#
#   2. Compile the main C source and any other sources. These commands are
#      in Compile[...].rule. The Exe class computes these rules for each
#      source file and appends them to its .rule, inherited by LuaExe.
#
#   3. Link the compile objects with lualib and other discovered libraries.
#      This command is in Exe[$I].rule, which is inherits by LuaExe.
#

LuaExe.parent = LuaConfig Exe

# Item name is typically a Lua source file.
#
# `.in` can contain multiple files, including Lua sources, C/C++ sources,
# object files and libraries. In that case, the first Lua source is treated
# as the "main" file (executed at startup). Any other Lua sources are
# bundled but not executed and not registered in `package.preload`.
# [Typically, it is preferable to make use of dependency scanning to include
# additional sources, rather than modifying `.in`.]
LuaExe.in = $I

# Generated C file
LuaExe.main = $(call get,out,LuaToC,$I)

# files handled by Exe: C/C++ sources and objects/libraries
LuaExe.ccIn = $(filter-out %.lua,$(call .,in)) $(call .,main) $(call .,luaLib)

# files handled by LuaToC
LuaExe.luaIn = $(or $(filter %.lua,$(call .,in)),$(call .,interpreter))

# .luaLibs names a set of native libraries to initialize with
# "luaopen_...()" calls (over and above those discovered in LUA_CPATH).
LuaExe.luaLibs =

LuaExe.inferredItems = $(call inherit) LuaToC[$I]

LuaExe.inferClass = LuaCompile

LuaExe.flags = impliedLibs dlopen lm $(call inherit)

# We need to list on the link line the libraries/objects that implement
# `luaopen_XXX` for each of the bundled native extensions ... but we do not
# know about these until after `cfromlua` is invoked, which after the rule
# generation phase. Our solution is to use the `$(...)` shell construct to
# extract the list of libraries from the "main" C file when the link command
# runs. As a side effect we generate a dependency include file (.d) for the
# executable.
LuaExe_win := $(if $(<isWin>),--win)
LuaExe.flag-impliedLibs = $$($(call .,luaHostExe) $(call .,cfromlua) --readlibs -MF $(call .,depFile) -MT $@ -MP $(call .,main) $(LuaExe_win))
LuaExe.depFile = $@.d

LuaExe.preloads = $(call get,preloads,LuaEnv,$I)


#----------------------------------------------------------------
# LuaSharedLib: generate a shared library that contains what a LuaExe would contain.

LuaSharedLib.parent = LuaLink LuaConfig SharedLib
LuaSharedLib.ext = .so
LuaSharedLib.inferredItems = $(call inherit) LuaToC[$I]

LuaLink.in = $I
LuaLink.main = $(call get,out,LuaToC,$I)
LuaLink.ccIn = $(filter-out %.lua,$(call .,in)) $(call .,main) $(call .,luaLib)
LuaLink.luaIn = $(or $(filter %.lua,$(call .,in)),$(call .,interpreter))
LuaLink.luaLibs =
LuaLink.inferredItems = $(call inherit) LuaToC[$I]
LuaLink.inferClass = LuaCompile
LuaLink.flags = impliedLibs dlopen lm $(call inherit)
LuaLink_win := $(if $(<isWin>),--win)
LuaLink.flag-impliedLibs = $$($(call .,luaHostExe) $(call .,cfromlua) --readlibs -MF $(call .,depFile) -MT $@ -MP $(call .,main) $(LuaLink_win))
LuaLink.depFile = $@.d
LuaLink.preloads = $(call get,preloads,LuaEnv,$I)

#LuaCompileSO.parent = LuaCompile
#LuaCompileSO.flags = $(call inherit) -DMAIN=somain


#----------------------------------------------------------------
# LuaToC: generate a C file from a Lua source file and all of its dependencies
#

LuaToC.parent    = LuaEnv Gen

LuaToC.ext       = .c
LuaToC.exe       = $(call .,luaHostExe)
LuaToC.in        = $(call .,luaIn)
LuaToC.command   = $(call .,exe) $(call .,cfromlua) -o $@ $(call .,options) $(addprefix -l ,$(call .,preloads)) -MF $(call .,depFile) -MP -Werror $(foreach l,$(call .,luaLibs),--open=$l) -- $^
LuaToC.deps      = $(call inherit) $(call .,cfromlua)
LuaToC.depFile   = $@.dep
LuaToC.options   = --minify

# We presume LuaToC is used by LuaExe, and that certain properties will be
# inherited from the corresponding instance of LuaExe.
LuaToC.luaIn     = $(call get,luaIn,LuaExe,$I)
LuaToC.luaLibs   = $(call get,luaLibs,LuaExe,$I)
LuaToC.preloads  = $(call get,preloads,LuaExe,$I)


#----------------------------------------------------------------
# LuaToLua: generate a single Lua file that bundles a Lua file
#           with all of its dependencies.
#

LuaToLua.parent  = LuaToC
LuaToLua.ext     = .lua
LuaToLua.options = --luaout $(call inherit)


#----------------------------------------------------------------
# LuaCompile: compile a C/C++ file with Lua headers

LuaCompile.parent   = LuaConfig Compile
LuaCompile.includes = $(call inherit) $(call .,luaDir)/src
LuaCompile.flags    = long-strings $(call inherit)


#----------------------------------------------------------------
# LuaExt: build dynamic and static libraries for a Lua native extension
#
# This is just a shorthand for creating two `LuaExtDynamic` and
# `LuaExtStatic` instances. Properties of *those* classes and their
# base class, LuaExtLib, affect the generated libs. Properties of
# LuaExt do not.
#
#
LuaExt.parent = Gen

LuaExt.out    = $(call get,out,LuaExtStatic LuaExtDynamic,$I)

# rule is just a phony
define LuaExt.rule
# $C[$I]
$(call Gen_itemPhony,$(call .,out))

endef

LuaExt.inferredItems = $(call inherit) LuaExtStatic[$I] LuaExtDynamic[$I]

LibHack.in = $I # until crank-c default changes

LuaExtStatic.parent = LuaExtLib[$I] LuaExtLib LibHack Lib
LuaExtStatic.inferClass = LuaCompile

LuaExtDynamic.parent = LuaExtLib[$I] LuaExtLib LuaConfig LibHack SharedLib
LuaExtDynamic.inferClass = LuaDCompile
LuaExtDynamic.options = $(inherit) $(call .,luaImplib)

# TODO: not all toolchains require separate objects for DLLs ad LIBs
LuaDCompile.parent = LuaCompile
LuaDCompile.flags = $(if $(<isWin>),-DLUA_BUILD_AS_DLL -DLUA_LIB) $(call inherit)

# LuaExe depends on Exe class
include $(crank-lua.dir)/$(crank-lua.crank-c)/crank-c.min
