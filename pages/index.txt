tooltree
########

ToolTree is a collection of utilities, including all their dependencies, in
one Git repository.

 * [MDB](mdb.html), a graphical debugger for Lua.

 * [`Smark`](smark.html), a markdown-like text-to-HTML converter with
   features for documenting software projects.

 * A collection of Lua modules and native extensions for developing
   networked applications ([monoglot](monoglot.html)), and tools for
   packaging Lua sources and native extensions into a self-contained
   executable ([build-lua](build-lua.html)).

 * A colllection of JavaScript modules, and a JavaScript framework for
   building Web apps from modular, tested components, and bunlding them into
   a single script or HTML file ([build-js](build-js.html)).

 * [tooltree.mk](tooltree.html), a package-based build system.


Building ToolTree
====

ToolTree consists of a number of software packages, each stored in a
subdirectory.  To build all packages, type `make` in the top directory.
Within any package subdirectory, you can type `make imports` to build the
other packages on which it depends, or `make` to build just the current
package, or `make deep` to build both.

For example, to build and run `MDB`:

    . $ cd tooltree/mdb
    . $ make imports
    . $ make mdb       # build and run demo


System Dependencies
----

* Make (GNU Make 3.81+), and clang or gcc, and associated C compiler tools
  are required to be present in `$PATH`.

* `node` is used, but only for unit testing of JavaScript modules.  If it
  is not present in the path, unit tests will be bypassed.


MacOS
....

The XCode Command Line Tools satisfy the compiler toolchain dependencies.


Linux
....

On Unbuntu/Debian, you can install the clang or gcc toolchains with the
following command:

    . $ sudo apt-get install clang
    . $ sudo apt-get install gcc g++


Windows
....

Tooltree previously supported building on Windows with Cygwin and Visual C
7, but does not now.  If this is of interest, check out older versions or
the `crank` branch of this project.
